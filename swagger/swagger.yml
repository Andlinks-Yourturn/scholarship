swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /ipfs/:
    post:
      tags:
      - ipfs
      description: upload json to IPFS
      operationId: IpfsController.upload
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.Ipfs'
      responses:
        "200":
          description: '{int} models.Ipfs.IpfsId'
        "403":
          description: body is empty
  /ipfs/{ipfsId}:
    get:
      tags:
      - ipfs
      description: download json from IPFS
      operationId: IpfsController.download
      parameters:
      - in: path
        name: ipfsId
        description: ipfsId for json
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Ipfs'
        "403":
          description: ipfsId is error
  /object/:
    get:
      tags:
      - object
      description: get all objects
      operationId: ObjectController.GetAll
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    post:
      tags:
      - object
      description: create object
      operationId: ObjectController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /object/{objectId}:
    get:
      tags:
      - object
      description: find object by objectid
      operationId: ObjectController.Get
      parameters:
      - in: path
        name: objectId
        description: the objectid you want to get
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    put:
      tags:
      - object
      description: update the object
      operationId: ObjectController.Update
      parameters:
      - in: path
        name: objectId
        description: The objectid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    delete:
      tags:
      - object
      description: delete the object
      operationId: ObjectController.Delete
      parameters:
      - in: path
        name: objectId
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: objectId is empty
  /project/:
    post:
      tags:
      - project
      description: create project
      operationId: ProjectController.Create
      parameters:
      - in: query
        name: name
        description: The username for login
        required: true
        type: string
      - in: query
        name: password
        description: The password for login
        required: true
        type: string
      - in: body
        name: body
        description: body for project content
        required: true
        schema:
          $ref: '#/definitions/models.Project'
      responses:
        "200":
          description: '{string} models.Project.Address'
        "403":
          description: body is empty
  /register/:
    get:
      tags:
      - register
      description: register user
      operationId: RegisterController.Get
      parameters:
      - in: query
        name: userName
        description: userName of the user
        required: true
        type: string
      - in: query
        name: password
        description: password for basecoin
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/.user'
        "403":
          description: :objectId is empty
  /sendTx/:
    get:
      tags:
      - sendTx
      description: sendTx
      operationId: SendTxController.Get
      parameters:
      - in: query
        name: userFrom
        description: userName of the user who donate money
        required: true
        type: string
      - in: query
        name: password
        description: password for basecoin
        required: true
        type: string
      - in: query
        name: userTo
        description: userName of who receive donation
        required: true
        type: string
      - in: query
        name: money
        description: the amount of money to  send
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/.user'
        "403":
          description: :objectId is empty
    post:
      tags:
      - sendTx
      description: sendTx
      operationId: SendTxController.Post
      parameters:
      - in: query
        name: userFrom
        description: userName of the user who donate money
        required: true
        type: string
      - in: query
        name: password
        description: password for basecoin
        required: true
        type: string
      - in: query
        name: userTo
        description: userName of who receive donation
        required: true
        type: string
      - in: query
        name: money
        description: the amount of money to  send
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/.user'
        "403":
          description: :objectId is empty
  /signature/:
    post:
      tags:
      - signature
      description: sign json
      operationId: SignatureController.Sign
      parameters:
      - in: query
        name: name
        description: the username you want to sign
        required: true
        type: string
      - in: query
        name: password
        description: the password you want to sign
        required: true
        type: string
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Student'
      responses:
        "200":
          description: '{string}'
        "403":
          description: sign is fail
  /signature/{ipfsId}:
    get:
      tags:
      - signature
      description: find json by ipfsId
      operationId: SignatureController.Get
      parameters:
      - in: path
        name: objectId
        description: the ipfsId you want to get
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
  /signature/{username}/{password}:
    get:
      tags:
      - signature
      description: find object by objectid
      operationId: SignatureController.Get
      parameters:
      - in: path
        name: username
        description: the username you want to verify
        required: true
        type: string
      - in: path
        name: password
        description: the password you want to verify
        required: true
        type: string
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} verify success!'
        "403":
          description: '{string} verify failure!'
  /student/:
    post:
      tags:
      - student
      description: create student
      operationId: StudentController.Create
      parameters:
      - in: query
        name: name
        description: The username for login
        required: true
        type: string
      - in: query
        name: tea_name
        description: The tea_username for login
        required: true
        type: string
      - in: query
        name: password
        description: The password for login
        required: true
        type: string
      - in: query
        name: sign
        description: The sign for login
        required: true
        type: string
      - in: body
        name: body
        description: body for student content
        required: true
        schema:
          $ref: '#/definitions/models.Student'
      responses:
        "200":
          description: '{string} models.Student.Address'
        "403":
          description: body is empty
  /student/{ipfsId}:
    get:
      tags:
      - student
      description: find json by ipfsId
      operationId: StudentController.Get
      parameters:
      - in: path
        name: objectId
        description: the ipfsId you want to get
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
definitions:
  .user:
    type: object
  models.Info:
    title: Info
    type: object
    properties:
      Birth:
        type: string
      GPA:
        type: integer
        format: int32
      LastName:
        type: string
      Major:
        type: string
      Rank:
        type: integer
        format: int32
      Score:
        type: integer
        format: int64
      firstName:
        type: string
  models.Ipfs:
    title: Ipfs
    type: object
    properties:
      Address:
        type: string
      Info:
        $ref: '#/definitions/models.Info'
      IpfsId:
        type: string
  models.Object:
    title: Object
    required:
    - ObjectId
    type: object
    properties:
      ObjectId:
        description: renxing
        type: string
      PlayerName:
        type: string
      Score:
        type: integer
        format: int64
  models.Pro_Info:
    title: Pro_Info
    type: object
    properties:
      Birth:
        type: string
      GPA:
        type: integer
        format: int32
      Major:
        type: string
      Rank:
        type: integer
        format: int32
      Score:
        type: integer
        format: int64
      Time:
        type: string
  models.Project:
    title: Project
    type: object
    properties:
      Address:
        type: string
      IpfsId:
        type: string
      Pro_Info:
        $ref: '#/definitions/models.Pro_Info'
  models.Student:
    title: Student
    type: object
    properties:
      Address:
        type: string
      IpfsId:
        type: string
      Stu_Info:
        $ref: '#/definitions/models.Info'
tags:
- name: object
  description: |
    Operations about object
- name: ipfs
  description: |
    Operations about Ipfs
- name: student
  description: |
    Operations about object
- name: project
  description: |
    Operations about object
- name: signature
  description: |
    Operations about object
